package com.pfe.dao;

import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import com.pfe.beans.BrevetDroit;

public class BrevetDroitDaoImpl implements BrevetDroitDao {
	private DaoFactory daoFactory;

	BrevetDroitDaoImpl(DaoFactory daoFactory) {
		this.daoFactory = daoFactory;
	}

	public void ajouter(BrevetDroit brevetDroit) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement = connexion.prepareStatement("INSERT  INTO brevetsdroits(intitule,type,champApplication,numeroDepot,numeroenregistrement,acteurexterne,id_Utilisateur,datebrevetdroit,preuve) VALUES(?,?,?,?,?,?,?,?,?);");
			preparedStatement.setString(1, brevetDroit.getIntitule());
			preparedStatement.setString(2, brevetDroit.getType());
			preparedStatement.setString(3, brevetDroit.getChampApplication());
			preparedStatement.setInt(4, brevetDroit.getNumeroDepot());
			preparedStatement.setInt(5, brevetDroit.getNumeroEnregistrement());
			preparedStatement.setString(6, brevetDroit.getActeurexterne());
			preparedStatement.setInt(7, brevetDroit.getId_utilisateur());
			preparedStatement.setDate(8, brevetDroit.getDateDepot());
			preparedStatement.setString(9,brevetDroit.getPreuve() );

			preparedStatement.executeUpdate();

		} catch (SQLException e) {

		}
	}

	
	
	public List<BrevetDroit> lister(String etat) {
		List<BrevetDroit> brevetDroits = new ArrayList<BrevetDroit>();
		Connection connexion = null;
		Statement statement = null;
		ResultSet resultat = null;
		
			try {
				connexion = daoFactory.getConnection();
				statement = connexion.createStatement();
				if(etat.equals("attente")) {
					resultat = statement.executeQuery("SELECT o.*,nom,prenom from brevetsDroits o,utilisateurs u where o.id_utilisateur=u.id_utilisateur and validation=false;");
				}else if(etat.equals("valider")) {
					resultat = statement.executeQuery("SELECT b.*,nom,prenom from brevetsdroits b,utilisateurs u where b.id_utilisateur=u.id_utilisateur and  validation=true order by datebrevetdroit desc;");					
				}

				while (resultat.next()) {
					BrevetDroit brevetDroit = new BrevetDroit();
					
					brevetDroit.setId_brevet(resultat.getInt("id_brevetDroit"));
					brevetDroit.setIntitule(resultat.getString("intitule"));
					brevetDroit.setType(resultat.getString("type"));
					brevetDroit.setChampApplication(resultat.getString("champApplication"));
					brevetDroit.setNumeroDepot(resultat.getInt("numeroDepot"));
					brevetDroit.setNumeroEnregistrement(resultat.getInt("numeroenregistrement"));
					brevetDroit.setDateDepot(resultat.getDate("datebrevetdroit"));
					brevetDroit.setActeurexterne(resultat.getString("acteurexterne"));
					brevetDroit.setDeclarant(resultat.getString("nom")+" "+resultat.getString("prenom"));
					brevetDroit.setValidation(resultat.getBoolean("validation"));
					
					brevetDroits.add(brevetDroit);

				}

			} catch (SQLException e) {
				e.printStackTrace();

			} finally {
				try {
					if (resultat != null)
						resultat.close();
					if (statement != null)
						statement.close();
					if (connexion != null)
						connexion.close();
				} catch (SQLException ignore) {

				}
			}

		return brevetDroits;

	}
	
	
	
	
	
	public List<BrevetDroit> lister(int id_user, String etat) {
		List<BrevetDroit> brevetDroits = new ArrayList<BrevetDroit>();
		Connection connexion = null;
		Statement statement = null;
		ResultSet resultat = null;
		PreparedStatement preparedStatement = null;

		if (etat.equals("valide")) {
			try {
				connexion = daoFactory.getConnection();
				preparedStatement = connexion
						.prepareStatement("select * from brevetsdroits where id_utilisateur=? and  validation=true ;");
				preparedStatement.setInt(1, id_user);

				resultat = preparedStatement.executeQuery();
				while (resultat.next()) {
					int id_brevet = resultat.getInt(1);
					String intitule = resultat.getString(2);
					String type = resultat.getString(3);
					String champApplication = resultat.getString(4);
					int numeroDepot = resultat.getInt(5);
					int numeroEnregistrement = resultat.getInt(6);
					String acteurExterne = resultat.getString(8);
					int id_utilisateur = resultat.getInt(9);

					Date datebrevetdroit = resultat.getDate(7);

					BrevetDroit brevetDroit = new BrevetDroit();
					brevetDroit.setId_brevet(id_brevet);
					brevetDroit.setIntitule(intitule);
					brevetDroit.setType(type);
					brevetDroit.setNumeroDepot(numeroDepot);
					brevetDroit.setNumeroEnregistrement(numeroEnregistrement);
					brevetDroit.setChampApplication(champApplication);
					brevetDroit.setActeurexterne(acteurExterne);
					brevetDroit.setId_utilisateur(id_utilisateur);
					brevetDroit.setDateDepot(datebrevetdroit);

					brevetDroits.add(brevetDroit);
				}
			} catch (SQLException e) {

			} finally {
				try {
					if (resultat != null)
						resultat.close();
					if (statement != null)
						statement.close();
					if (connexion != null)
						connexion.close();
				} catch (SQLException ignore) {

				}
			}

		} else if (etat.equals("nonvalide")) {
			try {
				connexion = daoFactory.getConnection();
				preparedStatement = connexion
						.prepareStatement("select * from brevetsdroits where id_utilisateur=? and validation=false ;");
				preparedStatement.setInt(1, id_user);

				resultat = preparedStatement.executeQuery();
				while (resultat.next()) {
					int id_brevet = resultat.getInt(1);
					String intitule = resultat.getString(2);
					String type = resultat.getString(3);
					String champApplication = resultat.getString(4);
					int numeroDepot = resultat.getInt(5);
					int numeroEnregistrement = resultat.getInt(6);
					String acteurExterne = resultat.getString(8);
					int id_utilisateur = resultat.getInt(9);

					Date datebrevetdroit = resultat.getDate(7);

					BrevetDroit brevetDroit = new BrevetDroit();

					brevetDroit.setIntitule(intitule);
					brevetDroit.setType(type);
					brevetDroit.setNumeroDepot(numeroDepot);
					brevetDroit.setNumeroEnregistrement(numeroEnregistrement);
					brevetDroit.setChampApplication(champApplication);
					brevetDroit.setActeurexterne(acteurExterne);
					brevetDroit.setId_utilisateur(id_utilisateur);
					brevetDroit.setDateDepot(datebrevetdroit);
					brevetDroit.setId_brevet(id_brevet);
					brevetDroits.add(brevetDroit);
				}
			} catch (SQLException e) {

			} finally {
				try {
					if (resultat != null)
						resultat.close();
					if (statement != null)
						statement.close();
					if (connexion != null)
						connexion.close();
				} catch (SQLException ignore) {

				}
			}

		}
		return brevetDroits;
	}

	public void supprimer(int id) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement = connexion.prepareStatement("DELETE  FROM brevetsdroits  WHERE id_brevetdroit=?");

			preparedStatement.setInt(1, id);

			preparedStatement.executeUpdate();

		} catch (SQLException e) {

		}

	}

	public int dernierBrevet() {

		Connection connexion = null;

		ResultSet resultat = null;
		PreparedStatement preparedStatement = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = connexion.prepareStatement("select max(id_brevetdroit) from brevetsdroits  ;");
			resultat = preparedStatement.executeQuery();
			resultat.next();
			int max_brevet = resultat.getInt(1);

			return max_brevet;
		} catch (SQLException e) {

		}
		return 0;

	}

	public void declarer_participant(int id_brevet, int id_participant) {

		Connection connexion = null;
		PreparedStatement preparedStatement = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement = connexion.prepareStatement(
					"INSERT  INTO participationbrevetdroit(id_brevetdroit,id_utilisateur) value(?,?)");

			preparedStatement.setInt(1, id_brevet);
			preparedStatement.setInt(2, id_participant);

			preparedStatement.executeUpdate();

		} catch (SQLException e) {

		}
	}

	public List<BrevetDroit> lister_participant(int id_user, String etat) {
		List<BrevetDroit> brevetDroits = new ArrayList<BrevetDroit>();
		Connection connexion = null;
		Statement statement = null;
		ResultSet resultat = null;
		PreparedStatement preparedStatement = null;

		if (etat.equals("valide")) {
			try {
				connexion = daoFactory.getConnection();
				preparedStatement = connexion.prepareStatement(
						"select b.* from brevetsdroits b join participationbrevetdroit p where p.id_brevetdroit=b.id_brevetdroit and p.id_utilisateur=? and b.validation=true;");
				preparedStatement.setInt(1, id_user);

				resultat = preparedStatement.executeQuery();
				while (resultat.next()) {
					int id_brevet = resultat.getInt(1);
					String intitule = resultat.getString(2);
					String type = resultat.getString(3);
					String champApplication = resultat.getString(4);
					int numeroDepot = resultat.getInt(5);
					int numeroEnregistrement = resultat.getInt(6);
					String acteurExterne = resultat.getString(8);
					int id_utilisateur = resultat.getInt(9);

					Date datebrevetdroit = resultat.getDate(7);

					BrevetDroit brevetDroit = new BrevetDroit();
					brevetDroit.setId_brevet(id_brevet);
					brevetDroit.setIntitule(intitule);
					brevetDroit.setType(type);
					brevetDroit.setNumeroDepot(numeroDepot);
					brevetDroit.setNumeroEnregistrement(numeroEnregistrement);
					brevetDroit.setChampApplication(champApplication);
					brevetDroit.setActeurexterne(acteurExterne);
					brevetDroit.setId_utilisateur(id_utilisateur);
					brevetDroit.setDateDepot(datebrevetdroit);

					brevetDroits.add(brevetDroit);
				}
			} catch (SQLException e) {

			} finally {
				try {
					if (resultat != null)
						resultat.close();
					if (statement != null)
						statement.close();
					if (connexion != null)
						connexion.close();
				} catch (SQLException ignore) {

				}
			}

		} else if (etat.equals("nonvalide")) {
			try {
				connexion = daoFactory.getConnection();
				preparedStatement = connexion.prepareStatement(
						"select b.* from brevetsdroits b join participationbrevetdroit p where p.id_brevetdroit=b.id_brevetdroit and p.id_utilisateur=? and b.validation=false;");
				preparedStatement.setInt(1, id_user);

				resultat = preparedStatement.executeQuery();
				while (resultat.next()) {
					int id_brevet = resultat.getInt(1);
					String intitule = resultat.getString(2);
					String type = resultat.getString(3);
					String champApplication = resultat.getString(4);
					int numeroDepot = resultat.getInt(5);
					int numeroEnregistrement = resultat.getInt(6);
					String acteurExterne = resultat.getString(8);
					int id_utilisateur = resultat.getInt(9);

					Date datebrevetdroit = resultat.getDate(7);

					BrevetDroit brevetDroit = new BrevetDroit();

					brevetDroit.setIntitule(intitule);
					brevetDroit.setType(type);
					brevetDroit.setNumeroDepot(numeroDepot);
					brevetDroit.setNumeroEnregistrement(numeroEnregistrement);
					brevetDroit.setChampApplication(champApplication);
					brevetDroit.setActeurexterne(acteurExterne);
					brevetDroit.setId_utilisateur(id_utilisateur);
					brevetDroit.setDateDepot(datebrevetdroit);
					brevetDroit.setId_brevet(id_brevet);
					brevetDroits.add(brevetDroit);
				}
			} catch (SQLException e) {

			} finally {
				try {
					if (resultat != null)
						resultat.close();
					if (statement != null)
						statement.close();
					if (connexion != null)
						connexion.close();
				} catch (SQLException ignore) {

				}
			}

		}
		return brevetDroits;
	}

	public void modifier(BrevetDroit brevetdroit) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement = connexion.prepareStatement(
					"update brevetsdroits SET intitule=?,type=?,champApplication=?,numeroDepot=?,numeroenregistrement=?,acteurexterne=?,id_Utilisateur=?,datebrevetdroit=?  WHERE id_brevetdroit=?");

			preparedStatement.setString(1, brevetdroit.getIntitule());
			preparedStatement.setString(2, brevetdroit.getType());
			preparedStatement.setString(3, brevetdroit.getChampApplication());
			preparedStatement.setInt(5, brevetdroit.getNumeroEnregistrement());
			preparedStatement.setInt(4, brevetdroit.getNumeroDepot());
			preparedStatement.setString(6, brevetdroit.getActeurexterne());
			preparedStatement.setInt(7, brevetdroit.getId_utilisateur());
			preparedStatement.setDate(8, brevetdroit.getDateDepot());
			preparedStatement.setInt(9, brevetdroit.getId_brevet());

			preparedStatement.executeUpdate();

		} catch (SQLException e) {

		}

	}

	public BrevetDroit listerbrevet(int id_brevet) {

		Connection connexion = null;
		Statement statement = null;
		ResultSet resultat = null;
		PreparedStatement preparedStatement = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement = connexion.prepareStatement("select * from brevetsdroits where  id_brevetdroit=?;");
			preparedStatement.setInt(1, id_brevet);

			resultat = preparedStatement.executeQuery();
			resultat.next();
			int id_brevet1 = resultat.getInt(1);
			String intitule = resultat.getString(2);
			String type = resultat.getString(3);
			String champApplication = resultat.getString(4);
			int numeroDepot = resultat.getInt(5);
			int numeroEnregistrement = resultat.getInt(6);
			String acteurExterne = resultat.getString(8);
			int id_utilisateur = resultat.getInt(9);
			String preuve = resultat.getString(11);

			Date datebrevetdroit = resultat.getDate(7);

			BrevetDroit brevetDroit = new BrevetDroit();

			brevetDroit.setIntitule(intitule);
			brevetDroit.setType(type);
			brevetDroit.setNumeroDepot(numeroDepot);
			brevetDroit.setNumeroEnregistrement(numeroEnregistrement);
			brevetDroit.setChampApplication(champApplication);
			brevetDroit.setActeurexterne(acteurExterne);
			brevetDroit.setId_utilisateur(id_utilisateur);
			brevetDroit.setDateDepot(datebrevetdroit);
			brevetDroit.setId_brevet(id_brevet1);
			brevetDroit.setPreuve(preuve);

			return brevetDroit;

		} catch (SQLException e) {

		} finally {
			try {
				if (resultat != null)
					resultat.close();
				if (statement != null)
					statement.close();
				if (connexion != null)
					connexion.close();
			} catch (SQLException ignore) {

			}
		}
		return null;

	}

	public void supprimerparticipant(int id_brevet) {

		Connection connexion = null;
		PreparedStatement preparedStatement = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement = connexion
					.prepareStatement("DELETE  FROM participationbrevetdroit  WHERE id_brevetdroit=?");

			preparedStatement.setInt(1, id_brevet);

			preparedStatement.executeUpdate();

		} catch (SQLException e) {

		}

	}

}
